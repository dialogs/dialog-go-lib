// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	kafka_go "github.com/segmentio/kafka-go"

	mock "github.com/stretchr/testify/mock"
)

// IReader is an autogenerated mock type for the IReader type
type IReader struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *IReader) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommitMessages provides a mock function with given fields: ctx, msgs
func (_m *IReader) CommitMessages(ctx context.Context, msgs ...kafka_go.Message) error {
	_va := make([]interface{}, len(msgs))
	for _i := range msgs {
		_va[_i] = msgs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...kafka_go.Message) error); ok {
		r0 = rf(ctx, msgs...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchMessage provides a mock function with given fields: ctx
func (_m *IReader) FetchMessage(ctx context.Context) (kafka_go.Message, error) {
	ret := _m.Called(ctx)

	var r0 kafka_go.Message
	if rf, ok := ret.Get(0).(func(context.Context) kafka_go.Message); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(kafka_go.Message)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadMessage provides a mock function with given fields: ctx
func (_m *IReader) ReadMessage(ctx context.Context) (kafka_go.Message, error) {
	ret := _m.Called(ctx)

	var r0 kafka_go.Message
	if rf, ok := ret.Get(0).(func(context.Context) kafka_go.Message); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(kafka_go.Message)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
